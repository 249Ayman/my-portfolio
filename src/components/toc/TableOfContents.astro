---
import type { MarkdownHeading } from 'astro'
import { POSTS_CONFIG } from '~/config'
import { cn } from '~/lib/utils'

interface Props {
  headings: MarkdownHeading[]
  class?: string
}

const { headings, class: className } = Astro.props

const filteredHeadings = headings
  .filter((heading) => heading.depth <= 4)
  .filter((heading) => heading.text.trim() !== '')
  .map((heading, index) => ({
    ...heading,
    text: heading.text.replace(/\s*[Hh][1-6]$/g, ''),
    order: index + 1,
  }))

const indentMap: Record<number, string> = {
  2: '',
  3: 'ml-4',
  4: 'ml-8',
}

const getIndentClass = (depth: number) => {
  return indentMap[depth] || ''
}
---

<div class={cn('fixed top-30 right-[calc(50%-384px)] translate-x-full w-64', className)}>
  <nav class="p-4">
    <h2 class="text-lg font-medium mb-4 text-foreground/80">{POSTS_CONFIG.tocText}</h2>
    <div class="relative overflow-hidden h-[calc(100vh-24rem)]">
      <ul class="space-y-2 absolute w-full transition-transform duration-300" data-toc-list>
        {
          filteredHeadings.map((heading) => (
            <li>
              <a
                href={`#${heading.slug}`}
                data-heading-link
                class={cn(
                  'group flex text-sm',
                  'min-h-[1.75rem]',
                  'w-full overflow-hidden relative',
                  'hover:bg-gradient-to-r hover:from-primary/10 dark:hover:from-primary/25 hover:to-transparent',
                  'transition-all duration-200 ease-in-out',
                  'data-[active]:bg-gradient-to-r data-[active]:from-primary/10 dark:data-[active]:from-primary/25 data-[active]:to-transparent',
                  heading.depth === 1 ? 'font-medium text-foreground' : 'text-foreground/60 hover:text-foreground/90',
                  getIndentClass(heading.depth)
                )}
              >
                <span
                  class={cn(
                    'flex items-center px-2 text-xs',
                    'text-primary/40 group-hover:text-primary/60',
                    'group-data-[active]:text-primary',
                    'transition-all duration-200 ease-in-out'
                  )}
                >
                  {heading.order.toString().padStart(2, '0')}
                </span>
                <span
                  class={cn(
                    'leading-[1.75rem] truncate pr-2',
                    'transition-all duration-200 ease-in-out',
                    'group-data-[active]:text-primary/90 group-data-[active]:font-medium'
                  )}
                  title={heading.text}
                >
                  {heading.text}
                </span>
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </nav>
</div>

<script>
  function updateActiveHeading() {
    const headingElements = document.querySelectorAll('h1[id], h2[id], h3[id], h4[id]')
    const headingLinks = document.querySelectorAll('[data-heading-link]')
    const tocList = document.querySelector('[data-toc-list]') as HTMLElement
    const tocContainer = tocList?.parentElement as HTMLElement

    if (!headingLinks.length) return

    // 移除调试日志
    // console.log(headingLinks)

    // 初始化时不再默认设置第一项为激活状态
    // headingLinks[0].setAttribute('data-active', '')

    let currentActiveHeading: string | null = null

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          // 使用 ratio 来判断可见性
          if (entry.intersectionRatio > 0) {
            const id = entry.target.id

            // 如果已经是当前激活的标题，则不需要更新
            if (currentActiveHeading === id) return

            currentActiveHeading = id
            headingLinks.forEach((link) => {
              if (link.getAttribute('href') === `#${id}`) {
                link.setAttribute('data-active', '')

                // 滚动目录到可见区域
                if (tocList && tocContainer) {
                  const containerHeight = tocContainer.offsetHeight
                  const activeLinkTop = (link as HTMLElement).offsetTop
                  const maxTransform = tocList.offsetHeight - containerHeight
                  // Adjust the scroll position to center the active link
                  let targetTransform = Math.max(0, activeLinkTop - (containerHeight - (link as HTMLElement).offsetHeight) / 2)
                  targetTransform = Math.min(targetTransform, maxTransform)
                  tocList.style.transform = `translateY(-${targetTransform}px)`
                }
              } else {
                link.removeAttribute('data-active')
              }
            })
          }
        })
      },
      {
        rootMargin: '-10px 0px -85% 0px',
        threshold: [0, 1],
      }
    )

    headingElements.forEach((heading) => observer.observe(heading))

    // 页面加载时检查当前可见的标题
    setTimeout(() => {
      const visibleHeading = Array.from(headingElements).find((heading) => {
        const rect = heading.getBoundingClientRect()
        return rect.top > 10 && rect.top < window.innerHeight * 0.33
      })
      if (visibleHeading) {
        const link = document.querySelector(`[href="#${visibleHeading.id}"]`)
        link?.setAttribute('data-active', '')
      } else {
        headingLinks[0]?.setAttribute('data-active', '')
      }
    }, 100)

    // 清理函数
    return () => observer.disconnect()
  }

  // 确保在页面内容加载完成后初始化
  document.addEventListener('astro:page-load', () => {
    const cleanup = updateActiveHeading()

    // 在页面切换时清理
    document.addEventListener('astro:before-swap', () => {
      cleanup?.()
    })
  })
</script>
