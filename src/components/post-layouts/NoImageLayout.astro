---
import { formatDate } from '~/lib/utils'
import Prose from '~/components/Prose.astro'

interface Props {
  frontmatter: any
  minutesRead?: string
}

const { frontmatter, minutesRead } = Astro.props
---

<article class="relative px-6 sm:px-8 py-6 sm:py-8 fade-up">
  <header class="pb-6 sm:pb-8 space-y-4 sm:space-y-6 max-w-2xl mx-auto">
    <div class="text-center border-y border-border/30 py-4 sm:py-6 mb-6 sm:mb-8 space-y-4">
      <h1
        class="text-2xl sm:text-3xl font-serif leading-tight tracking-wide
                bg-gradient-to-r from-foreground/90 to-foreground/70 bg-clip-text text-transparent text-balance"
      >
        {frontmatter.title}
      </h1>

      <div class="flex flex-wrap justify-center items-center gap-2 sm:gap-4 text-xs sm:text-sm text-muted-foreground/80">
        <div class="flex items-center gap-1.5 sm:gap-2">
          <span class="icon-[ph--calendar-blank] w-3.5 h-3.5 sm:w-4 sm:h-4 opacity-75"></span>
          <time datetime={frontmatter.pubDate.toISOString()}>
            {formatDate(frontmatter.pubDate)}
          </time>
        </div>
        {
          frontmatter.updatedDate && (
            <>
              <span class="text-muted-foreground/30">/</span>
              <div class="flex items-center gap-1.5 sm:gap-2">
                <span class="icon-[ph--clock-clockwise-light] w-3.5 h-3.5 sm:w-4 sm:h-4 opacity-75" />
                <time datetime={frontmatter.updatedDate.toISOString()}>{formatDate(frontmatter.updatedDate)}</time>
              </div>
            </>
          )
        }
        {
          minutesRead && (
            <>
              <span class="text-muted-foreground/30">/</span>
              <div class="flex items-center gap-1.5 sm:gap-2">
                <span class="icon-[ph--clock] w-3.5 h-3.5 sm:w-4 sm:h-4 opacity-75" />
                <span>{minutesRead} min read</span>
              </div>
            </>
          )
        }
      </div>
    </div>

    <div class="flex justify-center gap-2 sm:gap-3 flex-wrap">
      {
        frontmatter.tags?.map((tag: string) => (
          <a
            href={`/tags/${tag}`}
            class="px-3 sm:px-4 py-1 sm:py-1.5 text-[10px] sm:text-xs tracking-widest 
                   bg-tag-bg text-tag-text border border-tag-border rounded-full
                   hover:bg-tag-bg-hover hover:border-primary/30 hover:text-foreground
                   transition-all duration-300 group"
            aria-label={`View posts tagged with ${tag}`}
          >
            <span class="opacity-90 group-hover:opacity-100">#{tag}</span>
          </a>
        ))
      }
    </div>
  </header>
  <Prose>
    <slot />
  </Prose>
</article>
