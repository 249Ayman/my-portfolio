---

---

<button
  class="inline-flex items-center justify-center rounded-md text-foreground hover:scale-105 duration-200 transition-all cursor-pointer"
  id="search-switch"
  aria-label="Search"
  title="Search"
>
  <span class="icon-[material-symbols--manage-search-rounded] size-6"></span>
</button>

<div id="search-mask" class="fixed z-200 hidden inset-0 bg-background/80 backdrop-blur-md dark:bg-background/90">
  <div class="absolute left-1/2 top-20">
    <div id="search-panel" class="grid grid-rows-[auto_1fr] max-h-[80vh] w-[22rem] sm:w-[30rem] bg-background/95 dark:bg-background/95 border border-border rounded-lg shadow-lg dark:shadow-accent/20">
      <div id="search-bar" class="grid grid-cols-[auto_1fr] items-center gap-2 px-4 h-12 border-b border-border">
        <span class="icon-[material-symbols--search-rounded] size-5 text-muted-foreground"></span>
        <label class="sr-only" for="search-input">Search</label>
        <input
          type="search"
          id="search-input"
          class="w-full h-8 bg-transparent outline-none text-foreground placeholder:text-muted-foreground font-normal leading-8 text-base"
          placeholder="Search"
          autocomplete="off"
        />
      </div>
      <div id="search-results" class="overflow-y-auto no-scrollbar" data-base="/"></div>
    </div>
  </div>
</div>

<script>
  const toggleSearchAnimation = (searchMask: HTMLElement, searchPanel: HTMLElement, isClosing: boolean) => {
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion)').matches
    
    if (prefersReducedMotion) {
      searchMask.classList.toggle('hidden', isClosing)
      return
    }

    if (isClosing) {
      searchMask.classList.add('search-mask-leave')
      searchPanel.classList.add('search-panel-leave')
      setTimeout(() => {
        searchMask.classList.remove('search-mask-leave')
        searchPanel.classList.remove('search-panel-leave')
        searchMask.classList.add('hidden')
      }, 300)
    } else {
      searchMask.classList.remove('hidden')
      searchMask.classList.add('search-mask-enter')
      searchPanel.classList.add('search-panel-enter')
      const searchInput = document.getElementById('search-input') as HTMLInputElement
      searchInput.focus()
    }
  }

  const handleToggleSearch = () => {
    const searchMask = document.getElementById('search-mask')
    const searchPanel = document.getElementById('search-panel')
    if (!searchMask || !searchPanel) return

    const isClosed = searchMask.classList.contains('hidden')
    toggleSearchAnimation(searchMask, searchPanel, !isClosed)
  }

  const handleCloseSearch = (event: Event) => {
    const searchMask = document.getElementById('search-mask')
    const searchPanel = document.getElementById('search-panel')
    const searchSwitch = document.getElementById('search-switch')
    if (!searchMask || !searchPanel || searchMask.classList.contains('hidden')) return

    const target = event.target as Node
    const shouldClose = 
      (!searchPanel.contains(target) && !searchSwitch?.contains(target)) ||
      (target instanceof HTMLElement && 
       target.closest('#search-results') && 
       target.closest('a'))

    if (shouldClose) {
      toggleSearchAnimation(searchMask, searchPanel, true)
    }
  }

  const setupEventListeners = () => {
    const searchSwitch = document.getElementById('search-switch')
    if (searchSwitch) {
      searchSwitch.removeEventListener('click', handleToggleSearch)
    }
    searchSwitch?.addEventListener('click', handleToggleSearch)
  }

  document.addEventListener('astro:page-load', setupEventListeners)
  document.addEventListener('click', handleCloseSearch)
  document.addEventListener('keydown', (e: KeyboardEvent) => {
    if (e.key === 'Escape') {
      handleCloseSearch(e)
    } else if (e.key.toLowerCase() === 'k' && (e.ctrlKey || e.metaKey)) {
      e.preventDefault()
      handleToggleSearch()
    }
  })
</script>

<script>
  const searchInput = document.getElementById('search-input')

  // 声明 pagefind 类型
  declare const pagefind: any
  
  // input event
  const handleInput = async (e: Event) => {
    const searchResults = document.getElementById('search-results')
    if (!searchResults) return
    
    searchResults.innerHTML = ''
    
    if (!import.meta.env.PROD) {
      searchResults.innerHTML = `
        <a href=${searchResults.dataset.base} class="search-results-item">
          <div class="search-results-title">Search</div>
          <div class="search-results-excerpt">Search in development mode</div>
        </a>`
      return
    }

    const target = e.target as HTMLInputElement
    const query = target.value.trim()
    if (!query) return

    try {
      const search = await pagefind.search(query)
      // 按 URL 分组结果
      const groupedResults = new Map()

      await Promise.all(search.results.map(async (result: any) => {
        const data = await result.data()
        const locations = await result.locations()
        const url = data.url

        if (!groupedResults.has(url)) {
          groupedResults.set(url, {
            title: data.meta.title,
            url,
            excerpts: [],
            count: 0
          })
        }

        const group = groupedResults.get(url)
        group.excerpts.push({
          text: data.excerpt,
          hash: locations[0]?.hash || ''
        })
        group.count++
      }))

      // 渲染分组结果
      const resultsHTML = Array.from(groupedResults.entries()).map(([url, group]) => {
        const excerptsList = group.excerpts
          .slice(0, 3) // 最多显示3个匹配片段
          .map((excerpt:any) => `
            <div class="search-results-excerpt-item">
              <span class="search-results-excerpt-text">${excerpt.text}</span>
              ${excerpt.hash ? `<span class="search-results-excerpt-location">在 ${excerpt.hash} 处</span>` : ''}
            </div>
          `).join('')

        return `
          <div class="search-results-item">
            <div class="search-results-header">
              <a href="${url}${group.excerpts[0].hash}" class="search-results-title">
                ${group.title}
                ${group.count > 1 ? `<span class="search-results-count">(${group.count}处匹配)</span>` : ''}
              </a>
            </div>
            <div class="search-results-excerpts">
              ${excerptsList}
              ${group.excerpts.length > 3 ? 
                `<button class="search-results-more" data-url="${url}" data-count="${group.excerpts.length - 3}">显示更多 ${group.excerpts.length - 3} 处匹配</button>` : 
                ''}
            </div>
          </div>`
      })

      searchResults.innerHTML = resultsHTML.join('') || '<div class="p-4 text-muted-foreground">未找到相关内容</div>'

      // 添加"显示更多"按钮的点击事件
      const moreButtons = searchResults.querySelectorAll('.search-results-more')
      moreButtons.forEach(button => {
        button.addEventListener('click', async (e) => {
          const btn = e.target as HTMLButtonElement
          const url = btn.dataset.url
          const parent = btn.closest('.search-results-item')
          if (!parent || !url) return

          const group = groupedResults.get(url)
          if (!group) return

          const excerptsList = group.excerpts
            .slice(3)
            .map((excerpt:any) => `
              <div class="search-results-excerpt-item">
                <span class="search-results-excerpt-text">${excerpt.text}</span>
                ${excerpt.hash ? `<span class="search-results-excerpt-location">在 ${excerpt.hash} 处</span>` : ''}
              </div>
            `).join('')

          const container = document.createElement('div')
          container.className = 'search-results-more-content'
          container.innerHTML = excerptsList

          btn.parentElement?.insertBefore(container, btn)
          btn.remove()
        })
      })
    } catch (error) {
      console.error('Search error:', error)
      searchResults.innerHTML = '<div class="p-4 text-muted-foreground">搜索出错，请稍后重试</div>'
    }
  }

  // 移除旧的事件监听器
  document.addEventListener('astro:page-load', () => {
    const searchInput = document.getElementById('search-input')
    if (searchInput) {
      searchInput.removeEventListener('input', handleInput)
      searchInput.addEventListener('input', handleInput)
    }
  })

  // 页面卸载时清理
  document.addEventListener('astro:page-unload', () => {
    const searchInput = document.getElementById('search-input')
    if (searchInput) {
      searchInput.removeEventListener('input', handleInput)
    }
  })
</script>


{import.meta.env.PROD &&
  <script is:inline define:vars={{scriptUrl: ('/pagefind/pagefind.js')}}>
    let pagefindLoaded = false
    let pagefindLoadPromise = null

    async function loadPagefind() {
      if (pagefindLoaded) return
      if (pagefindLoadPromise) return pagefindLoadPromise

      pagefindLoadPromise = (async () => {
        try {
          const pagefind = await import(scriptUrl)
          await pagefind.options({
            excerptLength: 30, // 增加摘要长度
            filter: {
              // 只搜索 Post 内容
              collectionType: ['post']
            }
          })

          await pagefind.init()
          window.pagefind = pagefind
          pagefindLoaded = true
        } catch (error) {
          console.error('Failed to load pagefind:', error)
          throw error
        }
      })()

      return pagefindLoadPromise
    }

    // 延迟加载 pagefind
    document.addEventListener('astro:page-load', () => {
      if (!window.pagefind) loadPagefind()
    }, { once: true })
  </script>}