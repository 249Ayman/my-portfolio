---

---

<button
  class="inline-flex items-center justify-center text-foreground hover:scale-105 duration-200 transition-all cursor-pointer"
  id="search-switch"
  aria-label="Search"
  title="Search (Ctrl+K)"
>
  <span class="icon-[material-symbols--manage-search-rounded] size-6"></span>
</button>

<div id="search-mask" class="fixed z-200 hidden inset-0 bg-background/80 backdrop-blur-md dark:bg-background/90 transition-opacity duration-200 opacity-0">
  <div class="absolute left-1/2 top-20 -translate-x-1/2 transition-transform duration-300 -translate-y-4 search-panel-show">
    <div id="search-panel" class="grid grid-rows-[auto_1fr] max-h-[80vh] w-[22rem] sm:w-[40rem] bg-background/95 dark:bg-background/95 border border-border shadow-lg dark:shadow-accent/20">
      <div id="search-bar" class="grid grid-cols-[auto_1fr_auto] items-center gap-2 px-4 h-12 border-b border-border">
        <span class="icon-[material-symbols--search-rounded] size-5 text-muted-foreground"></span>
        <label class="sr-only" for="search-input">Search</label>
        <input
          type="search"
          id="search-input"
          class="w-full h-8 bg-transparent outline-none text-foreground placeholder:text-muted-foreground font-normal leading-8 text-base"
          placeholder="Search"
          autocomplete="off"
        />
        <kbd class="hidden sm:inline-flex items-center gap-1 px-2 py-0.5 text-xs text-muted-foreground bg-muted rounded">ESC</kbd>
      </div>
      <div id="search-results" class="overflow-y-auto no-scrollbar" data-base="/"></div>
    </div>
  </div>
</div>

<script>
  const searchInput = document.getElementById('search-input') as HTMLInputElement
  const searchMask = document.getElementById('search-mask')
  const searchSwitch = document.getElementById('search-switch')
  const searchResults = document.getElementById('search-results')

  // 声明 pagefind 类型
  declare const pagefind: any

  // 打开搜索面板
  const openSearch = () => {
    searchMask?.classList.remove('hidden')
    searchMask?.offsetHeight
    searchMask?.classList.remove('opacity-0')
    searchInput?.focus()
    // 移除了 document.body.style.overflow = 'hidden'
  }

  // 关闭搜索面板
  const closeSearch = () => {
    searchMask?.classList.add('opacity-0')
    if (searchInput) searchInput.value = ''
    if (searchResults) searchResults.innerHTML = ''
    setTimeout(() => {
      searchMask?.classList.add('hidden')
    }, 200)
  }

  const closeSearchIn = () => {
    searchMask?.classList.add('opacity-0')
    if (searchInput) searchInput.value = ''
    if (searchResults) searchResults.innerHTML = ''
      searchMask?.classList.add('hidden')
  }

  // 点击开关
  searchSwitch?.addEventListener('click', openSearch)

  // 点击遮罩层关闭
  searchMask?.addEventListener('click', (e) => {
    if (e.target === searchMask) closeSearch()
  })

  // 快捷键支持
  document.addEventListener('keydown', (e) => {
    // ESC关闭
    if (e.key === 'Escape') closeSearch()
    // Ctrl+K 切换
    if (e.ctrlKey && e.key.toLowerCase() === 'k') {
      e.preventDefault()
      if (searchMask?.classList.contains('hidden')) {
        openSearch()
      } else {
        closeSearch()
      }
    }
  })

  // input event
  const handleInput = async (e: Event) => {
    if (searchResults) {
      searchResults.innerHTML = ''
    }
    if (import.meta.env.PROD) {
      const target = e.target as HTMLInputElement
      const search = await pagefind.search(target.value)

      for (const result of search.results) {
        const data = await result.data()
        // 获取所有匹配位置
        const locations = await result.locations()

        const resultItem = document.createElement('a')
        resultItem.href = data.url
        resultItem.className = 'search-results-item'

        // 构建包含所有匹配片段的HTML
        let excerptsHtml = ''


        locations.forEach((location:any) => {
          excerptsHtml += `<div class="search-results-excerpt">${location.excerpt}</div>`
        })

        resultItem.innerHTML = `
          <div class="search-results-title">${data.meta.title}</div>
          ${excerptsHtml}
        `

        resultItem.addEventListener('click', closeSearchIn)
        searchResults?.appendChild(resultItem)
      }
    } else {
      const resultItem = document.createElement('a')
      resultItem.href = searchResults?.dataset.base || '/'
      resultItem.className = 'search-results-item'
      resultItem.innerHTML = `
        <div class="search-results-title">Search</div>
        <div class="search-results-excerpt">Search in development mode</div>
      `
      resultItem.addEventListener('click', closeSearchIn)
      searchResults?.appendChild(resultItem)
    }
  }

  searchInput?.addEventListener('input', handleInput)
</script>

{import.meta.env.PROD &&
  <script is:inline define:vars={{scriptUrl: ('/pagefind/pagefind.js')}}>
    async function loadPagefind() {
      const pagefind = await import(scriptUrl)

      await pagefind.options({
        'excerptLength': 20
      })

      pagefind.init()
      window.pagefind = pagefind
      pagefind.search('')
    }

    if (!window.pagefind) loadPagefind()
  </script>}
